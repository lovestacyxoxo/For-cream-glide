local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local root = character:WaitForChild("HumanoidRootPart")

local displayPlayers = ReplicatedStorage:WaitForChild("displayPlayers")
local playerStats = displayPlayers:FindFirstChild(player.Name):WaitForChild("stats")
local characterValue = playerStats:WaitForChild("character")

local function canUseSkill()
    return characterValue.Value:lower() == "cream"
end

local gui = Instance.new("ScreenGui")
gui.Parent = player:WaitForChild("PlayerGui")
gui.Name = "abcrem"

local glideButton = Instance.new("ImageButton")
glideButton.Parent = gui
glideButton.Size = UDim2.new(0, 140, 0, 140)
glideButton.Position = UDim2.new(0.6, 0, 0.5, 0)
glideButton.Image = "rbxassetid://107941069161772"
glideButton.BackgroundTransparency = 1
glideButton.Visible = canUseSkill()
glideButton.Active = true

local cooldownOverlay = Instance.new("ImageLabel")
cooldownOverlay.Parent = glideButton
cooldownOverlay.Size = UDim2.new(1, 0, 1, 0)
cooldownOverlay.Image = "rbxassetid://120424121715802"
cooldownOverlay.BackgroundTransparency = 1
cooldownOverlay.Visible = false

local cooldownText = Instance.new("TextLabel")
cooldownText.Parent = cooldownOverlay
cooldownText.Size = UDim2.new(1, 0, 1, 0)
cooldownText.BackgroundTransparency = 1
cooldownText.TextColor3 = Color3.fromRGB(225, 225, 225)
cooldownText.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
cooldownText.TextStrokeTransparency = 0
cooldownText.Font = Enum.Font.Arcade
cooldownText.TextSize = 30
cooldownText.Text = ""

local glideAnim = Instance.new("Animation")
glideAnim.AnimationId = "rbxassetid://104077515216832"

local extraFastGlideAnim = Instance.new("Animation")
extraFastGlideAnim.AnimationId = "rbxassetid://16842529374"

local upGlideAnim = Instance.new("Animation")
upGlideAnim.AnimationId = "rbxassetid://17169782184"

local glideTrack = humanoid:LoadAnimation(glideAnim)
local extraFastGlideTrack = humanoid:LoadAnimation(extraFastGlideAnim)
local upGlideTrack = humanoid:LoadAnimation(upGlideAnim)

local glideSound = Instance.new("Sound")
glideSound.SoundId = "rbxassetid://9120776421"
glideSound.Volume = 5
glideSound.Looped = true
glideSound.Parent = root

local isGliding = false
local isOnCooldown = false
local fastFalling = false

local stamina = 100
local drainRateNormal = 10
local drainRateUp = 30

local upButton
local staminaBar

local function stopGlideSound()
    if glideSound.IsPlaying then
        glideSound:Stop()
    end
end

local function stopAllAnimations()
    glideTrack:Stop()
    extraFastGlideTrack:Stop()
    upGlideTrack:Stop()
end

local function startCooldown(duration)
    isOnCooldown = true
    glideButton.Active = false
    cooldownOverlay.Visible = true
    for i = duration, 0, -1 do
        cooldownText.Text = tostring(i)
        task.wait(1)
    end
    cooldownOverlay.Visible = false
    isOnCooldown = false
    glideButton.Active = true
end

local function startGlide()
    if isGliding or isOnCooldown or humanoid.FloorMaterial ~= Enum.Material.Air then
        return
    end
    isGliding = true
    fastFalling = false
    stamina = 100

    staminaBar = Instance.new("Frame")
    staminaBar.Size = UDim2.new(0, 175, 0, 20)
    staminaBar.Position = UDim2.new(0.5, -175/2, 0.9, -20)
    staminaBar.BackgroundColor3 = Color3.fromRGB(255, 200, 150)
    staminaBar.BorderSizePixel = 0
    staminaBar.Parent = gui

    local gradient = Instance.new("UIGradient", staminaBar)
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 200, 150)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(204, 102, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 200, 150))
    })
    local stroke = Instance.new("UIStroke", staminaBar)
    stroke.Color = Color3.fromRGB(204, 102, 0)
    stroke.Thickness = 2

    upButton = Instance.new("ImageButton")
    upButton.Size = glideButton.Size
    local margin = 0.10
    upButton.Position = UDim2.new(
        glideButton.Position.X.Scale,
        glideButton.Position.X.Offset - glideButton.Size.X.Offset - margin,
        glideButton.Position.Y.Scale,
        glideButton.Position.Y.Offset
    )
    upButton.Image = "rbxassetid://104610086808016"
    upButton.BackgroundTransparency = 1
    upButton.Parent = gui

    local isGoingUp = false

    upButton.MouseButton1Down:Connect(function()
        isGoingUp = true
    end)
    upButton.MouseButton1Up:Connect(function()
        isGoingUp = false
        upGlideTrack:Stop()
    end)
    upButton.MouseLeave:Connect(function()
        isGoingUp = false
        upGlideTrack:Stop()
    end)

    local spaceBeganConn = UserInputService.InputBegan:Connect(function(input, processed)
        if processed then return end
        if input.KeyCode == Enum.KeyCode.Space then
            isGoingUp = true
        end
    end)
    local spaceEndedConn = UserInputService.InputEnded:Connect(function(input, processed)
        if processed then return end
        if input.KeyCode == Enum.KeyCode.Space then
            isGoingUp = false
            upGlideTrack:Stop()
        end
    end)

    glideTrack:Play()
    glideTrack:AdjustSpeed(1)
    glideSound.Pitch = 1
    glideSound:Play()

    local glideForce = Instance.new("BodyVelocity")
    glideForce.Velocity = Vector3.new(0, -7, 0)
    glideForce.MaxForce = Vector3.new(0, math.huge, 0)
    glideForce.Parent = root

    local staminaConnection
    staminaConnection = RunService.Heartbeat:Connect(function(dt)
        if not isGliding then return end
        if not fastFalling then
            if isGoingUp then
                glideForce.Velocity = Vector3.new(0, 5, 0)
                glideTrack:AdjustSpeed(1.2)
                glideSound.Pitch = 1.2
                if not upGlideTrack.IsPlaying then
                    upGlideTrack:Play()
                    upGlideTrack:AdjustSpeed(1.2)
                end
            else
                glideForce.Velocity = Vector3.new(0, -7, 0)
                glideTrack:AdjustSpeed(1)
                glideSound.Pitch = 1
                if upGlideTrack.IsPlaying then
                    upGlideTrack:Stop()
                end
            end

            local currentDrain = (isGoingUp and drainRateUp or drainRateNormal) * dt
            stamina = math.max(0, stamina - currentDrain)
            local percent = stamina / 100
            staminaBar.Size = UDim2.new(0, 175 * percent, 0, 20)

            if stamina <= 0 then
                if upGlideTrack.IsPlaying then
                    upGlideTrack:Stop()
                end
                fastFalling = true
                if upButton then
                    upButton:Destroy()
                end
                glideTrack:Stop()
                glideTrack:Play()
                glideTrack:AdjustSpeed(0.5)
                extraFastGlideTrack:Play()
                extraFastGlideTrack:AdjustSpeed(0.5)
                glideSound.Pitch = 0.5
                glideForce.Velocity = Vector3.new(0, -15, 0)
            end
        end
    end)

    local glideConnection
    glideConnection = RunService.Heartbeat:Connect(function()
        if humanoid.FloorMaterial ~= Enum.Material.Air then
            isGliding = false
            stopAllAnimations()
            glideForce:Destroy()
            glideSound.Pitch = 1
            stopGlideSound()
            if staminaBar then staminaBar:Destroy() end
            if upButton then upButton:Destroy() end
            if staminaConnection then staminaConnection:Disconnect() end
            glideConnection:Disconnect()
            if spaceBeganConn then spaceBeganConn:Disconnect() end
            if spaceEndedConn then spaceEndedConn:Disconnect() end
            startCooldown(30)
        end
    end)
end

glideButton.MouseButton1Click:Connect(startGlide)
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.Q then
        startGlide()
    end
end)

local function createButton(name, text, position, size)
    local btn = Instance.new("TextButton")
    btn.Parent = gui
    btn.Size = size or UDim2.new(0, 100, 0, 50)
    btn.Position = position
    btn.Text = text
    btn.BackgroundColor3 = Color3.fromRGB(255, 223, 0)
    btn.BorderColor3 = Color3.fromRGB(204, 173, 0)
    btn.Font = Enum.Font.Arcade
    btn.TextSize = 20
    btn.TextColor3 = Color3.fromRGB(0, 0, 0)
    return btn
end

local customiseButton = createButton("customiseButton", "Customise", UDim2.new(0, 20, 0.5, 0))
local xButton = createButton("xButton", "X", UDim2.new(0, 130, 0.5, 0), UDim2.new(0, 50, 0, 50))
local doubleSizeButton = createButton("doubleSizeButton", "2x", UDim2.new(0, 20, 0.6, 0))
local revertSizeButton = createButton("revertSizeButton", "Revert", UDim2.new(0, 20, 0.7, 0))

doubleSizeButton.Visible = false
revertSizeButton.Visible = false
xButton.Draggable = true

local originalSize = glideButton.Size
local isCustomising = false

customiseButton.MouseButton1Click:Connect(function()
    isCustomising = not isCustomising
    doubleSizeButton.Visible = isCustomising
    revertSizeButton.Visible = isCustomising
    glideButton.Draggable = isCustomising
    if upButton then
        upButton.Size = glideButton.Size
    end
end)

doubleSizeButton.MouseButton1Click:Connect(function()
    local newSize = glideButton.Size.X.Offset * 1.1
    glideButton.Size = UDim2.new(0, newSize, 0, newSize)
    if upButton then
        upButton.Size = glideButton.Size
    end
end)

revertSizeButton.MouseButton1Click:Connect(function()
    glideButton.Size = originalSize
    if upButton then
        upButton.Size = originalSize
    end
end)

xButton.MouseButton1Click:Connect(function()
    local visible = not doubleSizeButton.Visible
    doubleSizeButton.Visible = visible
    revertSizeButton.Visible = visible
    customiseButton.Visible = visible
end)
